//
//  Noise.cpp
//  RayTracing
//
//  Created by Lo√Øc CORENTHY on 9/23/12.
//
//

#include "Noise.hpp"

// Standard includes
#include <cmath>

using namespace MatouMalin;
using namespace std;

const int Noise::smPermutations[] = { 151,160,137,91,90,15,
    131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,
    190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,
    88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,134,139,48,27,166,
    77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,
    102,143,54, 65,25,63,161, 1,216,80,73,209,76,132,187,208,89,18,169,200,196,
    135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,250,124,123,
    5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,
    23,183,170,213,119,248,152, 2,44,154,163, 70,221,153,101,155,167,43,172,9,
    129,22,39,253,19,98,108,110,79,113,224,232,178,185, 112,104,218,246,97,228,
    251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,107,
    49,192,214, 31,181,199,106,157,184, 84,204,176,115,121,50,45,127,4,150,254,
    138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180
};

const double Noise::_pi = 3.14159265359f;

Noise::Noise(void)
{

    _permutations = {151,160,137,91,90,15,
        131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,
        190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,
        88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,134,139,48,27,166,
        77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,
        102,143,54, 65,25,63,161, 1,216,80,73,209,76,132,187,208,89,18,169,200,196,
        135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,250,124,123,
        5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,
        23,183,170,213,119,248,152, 2,44,154,163, 70,221,153,101,155,167,43,172,9,
        129,22,39,253,19,98,108,110,79,113,224,232,178,185, 112,104,218,246,97,228,
        251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,107,
        49,192,214, 31,181,199,106,157,184, 84,204,176,115,121,50,45,127,4,150,254,
        138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180,
        151,160,137,91,90,15,
        131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,
        190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,
        88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,134,139,48,27,166,
        77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,
        102,143,54, 65,25,63,161, 1,216,80,73,209,76,132,187,208,89,18,169,200,196,
        135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,250,124,123,
        5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,
        23,183,170,213,119,248,152, 2,44,154,163, 70,221,153,101,155,167,43,172,9,
        129,22,39,253,19,98,108,110,79,113,224,232,178,185, 112,104,218,246,97,228,
        251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,107,
        49,192,214, 31,181,199,106,157,184, 84,204,176,115,121,50,45,127,4,150,254,
        138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180};

}

Noise::Noise(const Noise & noise)
:_permutations(noise._permutations)
{
}

Noise Noise::operator=(const Noise & noise)
{
    if (this == & noise)
        return *this;

    _permutations = noise._permutations;

    return *this;
}

Noise::~Noise(void)
{
}

void Noise::_init(void)
{
    for (unsigned int i=0; i < 256; i++)
        _permutations.push_back(smPermutations[i]);

    for (unsigned int i=0; i < 256; i++)
            _permutations.push_back(smPermutations[i]);
}

double Noise::_grad(int hash, double x, double y, double z) const
{
    int lH = hash & 15;
    // CONVERT LO 4 BITS OF HASH CODE
    double lU = lH < 8 || lH == 12 || lH == 13 ? x : y; // INTO 12 GRADIENT DIRECTIONS.
    double lV = lH < 4 || lH == 12 || lH == 13 ? y : z;

    return (((lH & 1) == 0 ? lU : -lU) + ((lH&2) == 0 ? lV : -lV));
}

double Noise::perlinNoise(double x, double y, double z) const
{
    int lX = static_cast<int>(floor(x)) & 255;
    int lY = static_cast<int>(floor(y)) & 255;
    int lZ = static_cast<int>(floor(z)) & 255;

    x -= floor(x);
    y -= floor(y);
    z -= floor(z);

    double lU = _fade(x);
    double lV = _fade(y);
    double lW = _fade(z);

    int lA  = _permutations[lX]+lY;
    int lAA = _permutations[lA]+lZ;
    int lAB = _permutations[lA+1]+lZ;
    int lB  = _permutations[lX+1]+lY;
    int lBA = _permutations[lB]+lZ;
    int lBB = _permutations[lB+1]+lZ;

    double lTmp1 = _lerp(lV, _lerp(lU, _grad(_permutations[lAA], x, y, z),     _grad(_permutations[lBA], x-1.0, y, z)),
                             _lerp(lU, _grad(_permutations[lAB], x, y-1.0, z), _grad(_permutations[lBB], x-1.0, y-1.0, z)));

    double lTmp2 = _lerp(lV, _lerp(lU, _grad(_permutations[lAA+1], x, y, z-1.0), _grad(_permutations[lBA+1], x-1.0, y, z-1.0)),
                             _lerp(lU, _grad(_permutations[lAB+1], x, y-1.0, z-1.0), _grad(_permutations[lBB+1], x-1.0, y-1.0, z-1.0)));

    return _lerp(lW, lTmp1, lTmp2);
}
